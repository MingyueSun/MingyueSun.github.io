I"(<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/* 方法一 尾递归的优化 */
var factorial = function factorial(i, a){
  a = a || 1
  if (i &lt; 2) {
    return a
  }
  
  return factorial(i-1, a*i)
}

console.log(factorial(4))


/* 方法二 */
/* 用arguments.callee可以不用管函数名变还是不变都可以用 */
function fac(num) {
  if (num &lt;= 1) {
    return 1
  } else {
    // 闭包
    return num * fac(--num)  //方法一
    // return num * arguments.callee(--num)  //方法二
    /* 但在严格模式下不能通过脚本访问arguments.callee */
  }
}

var result = fac(4)
console.log(result)


/* 方法三 */
var factorial = function fac(num) {
  if (num &lt;= 1) {
    return 1
  } else {
  // 闭包
  return num*fac(num-1)
  }
}

var result = factorial(4)
console.log(result)


/* 方法四 */
function fac(n) {
  return n &gt; 1 ? n*fac(n-1) : 1
}

console.log(fac(4))


/* 方法五 for循环 (使用循环语句) */
function factorial(num) {
  for (var i = num - 1; i &gt;= 1; i--) {
    num *= i
  }
  return num
}

console.log(factorial(5))


/* 方法六 white循环 */
function factorial(num) {
  var result = num
  while (num &gt; 1) {
    num--
    result *= num
  }
  return result
}

console.log(factorial(4))

</code></pre></div></div>
:ET